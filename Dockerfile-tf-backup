FROM ubuntu:14.04
MAINTAINER openthings@163.com

RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        cmake \
        git \
        wget \
        libatlas-base-dev \
        libboost-all-dev \
        libgflags-dev \
        libgoogle-glog-dev \
        libhdf5-serial-dev \
        libleveldb-dev \
        liblmdb-dev \
        libopencv-dev \
        libprotobuf-dev \
        libsnappy-dev \
        protobuf-compiler \
        python-dev \
        python-numpy \
        python-pip \
        python-scipy 

#&& \
#    rm -rf /var/lib/apt/lists/*


ENV TENSORFLOW_ROOT=/opt/tensorflow
WORKDIR $TENSORFLOW_ROOT

#RUN apt-get install bazel

RUN 	apt-get install -y software-properties-common 
#RUN 	apt-get install -y openjdk-8-jdk="8u111" curl

RUN \
  echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections && \
  add-apt-repository -y ppa:webupd8team/java && \
  apt-get update && \
  apt-get install -y oracle-java8-installer 
#&& \
#  rm -rf /var/lib/apt/lists/* && \
#  rm -rf /var/cache/oracle-jdk8-installer

# Define commonly used JAVA_HOME variable
ENV JAVA_HOME /usr/lib/jvm/java-8-oracle

#RUN	add-apt-repository ppa:webupd8team/java && \
#	apt-get update && \
#	apt-get install -y oracle-java8-installer

RUN 	echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list &&\
	apt-get install -y curl &&\
	curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add - &&\
	apt-get update && \
	apt-get install -y bazel

#apt-get upgrade bazel
#wget https://github.com/bazelbuild/bazel/releases/tag/0.4.3 -O bazel

# FIXME: clone a specific git tag and use ARG instead of ENV once DockerHub supports this.
ENV CLONE_TAG=master

RUN git clone --progress -b ${CLONE_TAG} --depth 1 https://github.com/tensorflow/tensorflow.git . 

RUN apt-get install -y python-numpy python-dev python-wheel

#RUN bazel build -c opt //tensorflow/tools/pip_package:build_pip_package

#&& \
#    for req in $(cat python/requirements.txt) pydot; do pip install $req; done && \
#    mkdir build && cd build && \
#    cmake -DCPU_ONLY=1 .. && \
#    make -j"$(nproc)"

#ENV PYCAFFE_ROOT $CAFFE_ROOT/python
#ENV PYTHONPATH $PYCAFFE_ROOT:$PYTHONPATH
#ENV PATH $CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH
#RUN echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig

WORKDIR /workspace
